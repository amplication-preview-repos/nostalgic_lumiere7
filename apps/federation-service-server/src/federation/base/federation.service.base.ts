/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Federation as PrismaFederation } from "@prisma/client";

export class FederationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FederationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.federation.count(args);
  }

  async federations<T extends Prisma.FederationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FederationFindManyArgs>
  ): Promise<PrismaFederation[]> {
    return this.prisma.federation.findMany<Prisma.FederationFindManyArgs>(args);
  }
  async federation<T extends Prisma.FederationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FederationFindUniqueArgs>
  ): Promise<PrismaFederation | null> {
    return this.prisma.federation.findUnique(args);
  }
  async createFederation<T extends Prisma.FederationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FederationCreateArgs>
  ): Promise<PrismaFederation> {
    return this.prisma.federation.create<T>(args);
  }
  async updateFederation<T extends Prisma.FederationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FederationUpdateArgs>
  ): Promise<PrismaFederation> {
    return this.prisma.federation.update<T>(args);
  }
  async deleteFederation<T extends Prisma.FederationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FederationDeleteArgs>
  ): Promise<PrismaFederation> {
    return this.prisma.federation.delete(args);
  }
}
